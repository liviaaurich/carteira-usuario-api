## Obs.:
# * docker network create --driver bridge
    # -> Crio uma rede para meus vários containers se conectar a ela e se comunicarem
# * docker container run -d -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=root --network carteira-usuario-network --name carteira-postgresql postgres:12.1
    # -> Iniciando um container do postegresql especificando a rede

# Passo a passo quando altero:
    # -> docker container rm carteira-postgresql --force --volumes  (remover o container do banco)
    # -> ./mvnw clean package (gerar um novo jar da aplicação)
    # -> docker image build -t carteira-usuario-api . (builda a nova imagem com as modificações realizadas)
    # -> docker container run -d -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=root --network carteira-usuario-network --name carteira-postgresql postgres:12.1
        # (subo um container na minha network com a imagem do banco)
    # -> docker image prune (limpar as imagens none)
    # -> docker container run --rm -p 8081:8081 -e DB_HOST=carteira-postgresql --network carteira-usuario-network carteira-usuario-api
        # (subo a aplicação na minha network criada setando a variável de ambiente DB_HOST)

# Construindo a imagem da aplicação manualmente:
    # -> ./mvnw clean package (gerar um novo jar da aplicação)
    # -> docker image build -t carteira-usuario-api . (builda a nova imagem com as modificações realizadas)

# Construindo a imagem da aplicação com o maven:
    # -> pom.xml linha 261 profile docker
    # -> rodar: ./mvnw package -Pdocker (defino o profile que criei para gerar a imagem)

## Anotações docker-compose
# command: ["/wait-for-it.sh", "-t 30", "postgresql:5432", "--", "java", "-jar", "app.jar"]
    # -> Rodo o wait-for-it.sh com o timeout de 30 segundos, ele vai ficar observando a porta especificada (postgresql:5432), quando ele ver que a porta ta
        # disponível no host, ele deve executar os comandos "java", "-jar", "app.jar".

# Escalando o serviço:
    # -> Remover o ports do serviço no docker-compose
    # -> Limpar os containers e volumes: docker-compose down --volumes
    # -> Subir com o comando: docker-compose up --scale carteira-usuario-api=2

    ## Proxy reverso com Nginx:
        # -> Um servidor http recebe a requisição e encaminha a mesma
        # -> Adicionei o container dele no meu docker-compose (carteira-usuario-proxy)
        # -> Agora consigo acessar no postman, porém quando eu acessar tenho que colocar a porta do nginx, já que é ele quem vai fazer o redirecionamento

    ## Problemas
        # -> Cada servidor/container armazena http session na própria memória, então precisamos de um lugar para compartilhar esses objetos que estão
            # na sessão entre todos os containers (para isso vamos usar o redis - imagem no docker-compose)

    ## Solução
        ## Comando Redis - Terminal (importante ressaltar que ele armazena por chave e valor)
            # -> keys *; set "nome da chave" "valor da chave" (ex: set nome Livia); get "nome da chave"; del "nome da chave";

        ## Spring Session (para armazenar os objetos de sessão dentro do redis)
            # -> Fornece um API e implementações para gerenciar informações de sessões, ele consegue fazer com que ao invés de armazenar as informações
                # em memória, ele armazene por exemplo no Redis (tem um subprojeto inclusive chamado Spring Session Data Redis
            # -> Dependencias adicionadas no pom (spring-boot-starter-data-redis, spring-session-data-redis)
            # -> Resolvendo problemas com storage de Authorization Codes (Especialista Spring REST - 24.21)